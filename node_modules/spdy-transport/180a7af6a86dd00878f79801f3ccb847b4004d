<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Component\Yaml\Tests;

use PHPUnit\Framework\TestCase;
use Symfony\Component\Yaml\Exception\ParseException;
use Symfony\Component\Yaml\Yaml;
use Symfony\Component\Yaml\Parser;

class ParserTest extends TestCase
{
    protected $parser;

    protected function setUp()
    {
        $this->parser = new Parser();
    }

    protected function tearDown()
    {
        $this->parser = null;
    }

    /**
     * @dataProvider getDataFormSpecifications
     */
    public function testSpecifications($file, $expected, $yaml, $comment, $deprecated)
    {
        $deprecations = array();

        if ($deprecated) {
            set_error_handler(function ($type, $msg) use (&$deprecations) {
                if (E_USER_DEPRECATED !== $type) {
                    restore_error_handler();

                    if (class_exists('PHPUnit_Util_ErrorHandler')) {
                        return call_user_func_array('PHPUnit_Util_ErrorHandler::handleError', func_get_args());
                    }

                    return call_user_func_array('PHPUnit\Util\ErrorHandler::handleError', func_get_args());
                }

                $deprecations[] = $msg;
            });
        }

        $this->assertEquals($expected, var_export($this->parser->parse($yaml), true), $comment);

        if ($deprecated) {
            restore_error_handler();

            $this->assertCount(1, $deprecations);
            $this->assertContains('Using the comma as a group separator for floats is deprecated since version 3.2 and will be removed in 4.0.', $deprecations[0]);
        }
    }

    public function getDataFormSpecifications()
    {
        $parser = new Parser();
        $path = __DIR__.'/Fixtures';

        $tests = array();
        $files = $parser->parse(file_get_contents($path.'/index.yml'));
        foreach ($files as $file) {
            $yamls = file_get_contents($path.'/'.$file.'.yml');

            // split YAMLs documents
            foreach (preg_split('/^---( %YAML\:1\.0)?/m', $yamls) as $yaml) {
                if (!$yaml) {
                    continue;
                }

                $test = $parser->parse($yaml);
                if (isset($test['todo']) && $test['todo']) {
                    // TODO
                } else {
  